<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

  <!-- 自动扫描 -->
  <context:component-scan base-package="com.musicbeat.web"/>

  <!-- 第一种方式：加载一个properties文件 -->
  <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="location" value="classpath:config/jdbc.properties"/>
  </bean>


  <!-- 第二种方式：加载多个properties文件
  <bean id="configProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
      <property name="locations">
          <list>
              <value>classpath:jdbc.properties</value>
              <value>classpath:common.properties</value>
          </list>
      </property>
      <property name="fileEncoding" value="UTF-8"/>
  </bean>
  <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">
      <property name="properties" ref="configProperties"/>
  </bean>
  -->

  <!-- 配置数据源 -->
  <!--<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"-->
  <!--destroy-method="close">-->
  <!--<property name="driverClassName" value="${driverClasss}"/>-->
  <!--<property name="url" value="${jdbcUrl}"/>-->
  <!--<property name="username" value="${username}"/>-->
  <!--<property name="password" value="${password}"/>-->
  <!--&lt;!&ndash; 初始化连接大小 &ndash;&gt;-->
  <!--<property name="initialSize" value="${initialSize}"/>-->
  <!--&lt;!&ndash; 连接池最大数量 &ndash;&gt;-->
  <!--<property name="maxActive" value="${maxActive}"/>-->
  <!--&lt;!&ndash; 连接池最大空闲 &ndash;&gt;-->
  <!--<property name="maxIdle" value="${maxIdle}"/>-->
  <!--&lt;!&ndash; 连接池最小空闲 &ndash;&gt;-->
  <!--<property name="minIdle" value="${minIdle}"/>-->
  <!--&lt;!&ndash; 获取连接最大等待时间 &ndash;&gt;-->
  <!--<property name="maxWait" value="${maxWait}"/>-->
  <!--</bean>-->

  <bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource">
    <property name="driverClassName" value="${driverClasss}"/>
    <property name="url" value="${jdbcUrl}"/>
    <property name="username" value="${username}"/>
    <property name="password" value="${password}"/>
    <!-- 连接池最大数量 -->
    <property name="maxActive" value="${maxActive}"/>
    <!-- 连接池最小空闲 -->
    <property name="minIdle" value="${minIdle}"/>
    <!-- 获取连接最大等待时间 -->
    <property name="maxWait" value="${maxWait}"/>
    <!-- 初始化连接大小 -->
    <property name="initialSize" value="${initialSize}"/>
    <property name="testWhileIdle" value="${testWhileIdle}"/>
    <property name="testOnBorrow" value="${testOnBorrow}"/>
    <property name="testOnReturn" value="${testOnReturn}"/>
    <property name="validationQuery" value="${validationQuery}"/>
    <property name="validationInterval" value="${validationInterval}"/>
    <property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}"/>
    <property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}"/>
    <property name="removeAbandoned" value="${removeAbandoned}"/>
    <property name="logAbandoned" value="${logAbandoned}"/>
    <property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}"/>
    <property name="jmxEnabled" value="${jmxEnabled}"/>
  </bean>

  <!--sqlsessionFactory bean-->
  <bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
    <property name="configLocation" value="classpath:config/mybatis/sqlmapConfig.xml"/>
    <property name="dataSource" ref="dataSource"/>
  </bean>

  <!-- mybatis和spring完美整合，不需要mybatis的配置映射文件 -->
  <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    <property name="dataSource" ref="dataSource"/>
    <!-- 自动扫描mapping.xml文件 -->
    <property name="mapperLocations" value="classpath:mapper/*Mapper.xml"/>
  </bean>

  <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
  <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    <property name="basePackage" value="com.musicbeat.web.mapper"/>
    <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
  </bean>


  <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
  <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="dataSource"/>
  </bean>

  <!-- 将session放入redis -->
  <context:annotation-config/>
  <bean id="redisHttpSessionConfiguration"
        class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration">
    <property name="maxInactiveIntervalInSeconds" value="120"/>
  </bean>

  <!-- redis 配置 -->
  <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
    <property name="hostName" value="${redis_hostname}"/>
    <property name="port" value="${redis_port}"/>
    <property name="password" value="${redis_password}"/>
  </bean>

  <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
    <property name="connectionFactory" ref="jedisConnectionFactory"></property>
    <property name="keySerializer">
      <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
    </property>
    <property name="valueSerializer">
      <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
    </property>
    <property name="hashKeySerializer">
      <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
    </property>
    <property name="hashValueSerializer">
      <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
    </property>
  </bean>

  <bean id="defaultCookieSerializer"
        class="org.springframework.session.web.http.DefaultCookieSerializer">
    <property name="cookieName" value="MUSICBEAT_SESSION_ID"/>
    <property name="cookiePath" value="/"/>
  </bean>

  <bean id="cookieHttpSessionStrategy"
        class="org.springframework.session.web.http.CookieHttpSessionStrategy">
    <property name="cookieSerializer" ref="defaultCookieSerializer"/>
  </bean>

  <tx:advice id="txAdvice" transaction-manager="transactionManager">
    <tx:attributes>
      <tx:method name="find*" propagation="REQUIRED"/>
      <tx:method name="update*" propagation="REQUIRED"/>
      <tx:method name="delete*" propagation="REQUIRED"/>
      <tx:method name="add*" propagation="REQUIRED"/>
    </tx:attributes>
  </tx:advice>
</beans>