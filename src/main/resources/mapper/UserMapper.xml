<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.musicbeat.web.mapper.UserMapper">
  <!--返回映射实体-->
  <resultMap id="BaseResultMap" type="com.musicbeat.web.model.User">
    <constructor>
      <idArg column="id" javaType="java.lang.Integer" jdbcType="INTEGER"/>
      <arg column="username" javaType="java.lang.String" jdbcType="VARCHAR"/>
      <arg column="password" javaType="java.lang.String" jdbcType="VARCHAR"/>
      <arg column="gender" javaType="java.lang.Boolean" jdbcType="BIT"/>
      <arg column="realname" javaType="java.lang.String" jdbcType="VARCHAR"/>
      <arg column="country" javaType="java.lang.String" jdbcType="VARCHAR"/>
      <arg column="province" javaType="java.lang.String" jdbcType="VARCHAR"/>
      <arg column="city" javaType="java.lang.String" jdbcType="VARCHAR"/>
      <arg column="address" javaType="java.lang.String" jdbcType="VARCHAR"/>
      <arg column="qq" javaType="java.lang.String" jdbcType="VARCHAR"/>
      <arg column="phone" javaType="java.lang.String" jdbcType="VARCHAR"/>
      <arg column="email" javaType="java.lang.String" jdbcType="VARCHAR"/>
      <arg column="picture" javaType="java.lang.String" jdbcType="VARCHAR"/>
      <arg column="privilege" javaType="java.lang.String" jdbcType="VARCHAR"/>
      <arg column="is_real_public" javaType="java.lang.Boolean" jdbcType="BIT"/>
    </constructor>
  </resultMap>

  <!--基础列表属性-->
  <sql id="Base_Column_List">
    id, username, password, gender, realname, country, province, city, address, qq, phone,
    email, picture, privilege, is_real_public
  </sql>

  <!--由主键获取用户-->
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from user
    where id = #{id,jdbcType=INTEGER}
  </select>

  <!--由用户名获取用户-->
  <select id="selectByUserName" parameterType="java.lang.String"
          resultType="com.musicbeat.web.model.User" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from user
    <where>
      <if test="username != null and username != ''">
        and username = "%"#{username,jdbcType=VARCHAR}"%"
      </if>
    </where>
  </select>

  <!--由用户名获取用户，非like语句-->
  <select id="selectByUserNameSingle" parameterType="java.lang.String"
          resultType="com.musicbeat.web.model.User" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from user
    <where>
      <if test="username != null and username != ''">
        and username = #{username,jdbcType=VARCHAR}
      </if>
    </where>
  </select>

  <!--由用户真实姓名获取用户-->
  <select id="selectByRealName" parameterType="java.lang.String"
          resultType="com.musicbeat.web.model.User" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from user
    <where>
      <if test="realname != null and realname != ''">
        and realname like "%"#{realname,jdbcType=VARCHAR}"%"
      </if>
    </where>
  </select>

  <!--获取管理员-->
  <select id="selectAdmin" resultType="com.musicbeat.web.model.User" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from user
    where privilege = 'admin'
  </select>

  <!--由号码获取用户-->
  <select id="selectByPhone" parameterType="java.lang.String"
          resultType="com.musicbeat.web.model.User" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from user
    <where>
      <if test="phone != null and phone != ''">
        and phone like "%"#{phone,jdbcType=VARCHAR}"%"
      </if>
    </where>
  </select>

  <!--由号码获取用户，非like语句-->
  <select id="selectByPhoneSingle" parameterType="java.lang.String"
          resultType="com.musicbeat.web.model.User" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from user
    <where>
      <if test="phone != null and phone != ''">
        and phone = #{phone,jdbcType=VARCHAR}
      </if>
    </where>
  </select>

  <!--由邮箱获取用户-->
  <select id="selectByEmail" parameterType="java.lang.String"
          resultType="com.musicbeat.web.model.User" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from user
    <where>
      <if test="email != null and email != ''">
        and email like "%"#{email,jdbcType=VARCHAR}"%"
      </if>
    </where>
  </select>

  <!--由邮箱获取用户，非like语句-->
  <select id="selectByEmailSingle" parameterType="java.lang.String"
          resultType="com.musicbeat.web.model.User" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from user
    <where>
      <if test="email != null and email != ''">
        and email = #{email,jdbcType=VARCHAR}
      </if>
    </where>
  </select>

  <!--由主键删除用户-->
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    DELETE FROM user
    WHERE id = #{id,jdbcType=INTEGER}
  </delete>

  <!--插入新用户-->
  <insert id="insert" parameterType="com.musicbeat.web.model.User">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into user (username, password, gender,
    realname, country, province,
    city, address, qq,
    phone, email, picture,
    privilege, is_real_public)
    values (#{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, #{gender,jdbcType=BIT},
    #{realname,jdbcType=VARCHAR}, #{country,jdbcType=VARCHAR}, #{province,jdbcType=VARCHAR},
    #{city,jdbcType=VARCHAR}, #{address,jdbcType=VARCHAR}, #{qq,jdbcType=VARCHAR},
    #{phone,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{picture,jdbcType=VARCHAR},
    #{privilege,jdbcType=VARCHAR}, #{isRealPublic,jdbcType=BIT})
  </insert>

  <!--插入新用户，属性可选-->
  <insert id="insertSelective" parameterType="com.musicbeat.web.model.User">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="username != null">
        username,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="gender != null">
        gender,
      </if>
      <if test="realname != null">
        realname,
      </if>
      <if test="country != null">
        country,
      </if>
      <if test="province != null">
        province,
      </if>
      <if test="city != null">
        city,
      </if>
      <if test="address != null">
        address,
      </if>
      <if test="qq != null">
        qq,
      </if>
      <if test="phone != null">
        phone,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="picture != null">
        picture,
      </if>
      <if test="privilege != null">
        privilege,
      </if>
      <if test="isRealPublic != null">
        is_real_public,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="gender != null">
        #{gender,jdbcType=BIT},
      </if>
      <if test="realname != null">
        #{realname,jdbcType=VARCHAR},
      </if>
      <if test="country != null">
        #{country,jdbcType=VARCHAR},
      </if>
      <if test="province != null">
        #{province,jdbcType=VARCHAR},
      </if>
      <if test="city != null">
        #{city,jdbcType=VARCHAR},
      </if>
      <if test="address != null">
        #{address,jdbcType=VARCHAR},
      </if>
      <if test="qq != null">
        #{qq,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        #{phone,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="picture != null">
        #{picture,jdbcType=VARCHAR},
      </if>
      <if test="privilege != null">
        #{privilege,jdbcType=VARCHAR},
      </if>
      <if test="isRealPublic != null">
        #{isRealPublic,jdbcType=BIT},
      </if>
    </trim>
  </insert>

  <!--由主键更新用户，属性可选-->
  <update id="updateByPrimaryKeySelective" parameterType="com.musicbeat.web.model.User">
    update user
    <set>
      <if test="username != null">
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="gender != null">
        gender = #{gender,jdbcType=BIT},
      </if>
      <if test="realname != null">
        realname = #{realname,jdbcType=VARCHAR},
      </if>
      <if test="country != null">
        country = #{country,jdbcType=VARCHAR},
      </if>
      <if test="province != null">
        province = #{province,jdbcType=VARCHAR},
      </if>
      <if test="city != null">
        city = #{city,jdbcType=VARCHAR},
      </if>
      <if test="address != null">
        address = #{address,jdbcType=VARCHAR},
      </if>
      <if test="qq != null">
        qq = #{qq,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        phone = #{phone,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="picture != null">
        picture = #{picture,jdbcType=VARCHAR},
      </if>
      <if test="privilege != null">
        privilege = #{privilege,jdbcType=VARCHAR},
      </if>
      <if test="isRealPublic != null">
        is_real_public = #{isRealPublic,jdbcType=BIT},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>

  <!--由主键更新用户-->
  <update id="updateByPrimaryKey" parameterType="com.musicbeat.web.model.User">
    UPDATE user
    SET username     = #{username,jdbcType=VARCHAR},
      password       = #{password,jdbcType=VARCHAR},
      gender         = #{gender,jdbcType=BIT},
      realname       = #{realname,jdbcType=VARCHAR},
      country        = #{country,jdbcType=VARCHAR},
      province       = #{province,jdbcType=VARCHAR},
      city           = #{city,jdbcType=VARCHAR},
      address        = #{address,jdbcType=VARCHAR},
      qq             = #{qq,jdbcType=VARCHAR},
      phone          = #{phone,jdbcType=VARCHAR},
      email          = #{email,jdbcType=VARCHAR},
      picture        = #{picture,jdbcType=VARCHAR},
      privilege      = #{privilege,jdbcType=VARCHAR},
      is_real_public = #{isRealPublic,jdbcType=BIT}
    WHERE id = #{id,jdbcType=INTEGER}
  </update>

</mapper>