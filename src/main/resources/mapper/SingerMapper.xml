<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.musicbeat.web.mapper.SingerMapper">

  <!--设置二级缓存-->
  <cache eviction="LRU" type="org.mybatis.caches.redis.RedisCache"/>

  <resultMap id="BaseResultMap" type="com.musicbeat.web.model.Singer">
      <id column="id" property="id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <result column="name" property="name" javaType="java.lang.String" jdbcType="VARCHAR" />
      <result column="gender" property="gender" javaType="java.lang.Boolean" jdbcType="BIT" />
      <result column="lang" property="lang" javaType="java.lang.String" jdbcType="VARCHAR" />
      <result column="picture" property="picture" javaType="java.lang.String" jdbcType="VARCHAR" />
      <result column="is_band" property="isBand" javaType="java.lang.Boolean" jdbcType="BIT" />
      <result column="introduction" property="introduction" javaType="java.lang.String" jdbcType="LONGVARCHAR" />
  </resultMap>

  <resultMap id="SingerAlbumMap" type="com.musicbeat.web.model.Singer" extends="BaseResultMap">
    <collection property="albums" ofType="com.musicbeat.web.model.Album">
      <id property="id" column="a_id"/>
      <result property="name" column="a_name"/>
      <result property="introduction" column="a_introduction"/>
      <result property="releaseTime" column="a_releaseTime"/>
      <result property="picture" column="a_picture"/>
    </collection>
  </resultMap>

  <sql id="Base_Column_List">
    id, name, gender, lang, picture, is_band
  </sql>

  <sql id="Blob_Column_List">
    introduction
  </sql>

  <select id="selectByPrimaryKey" useCache="true" parameterType="java.lang.Integer" resultMap="SingerAlbumMap">
    select s.id,s.name,s.gender,s.lang,s.picture,s.introduction,s.is_band,a.id as a_id,a.name as a_name,
    a.introduction as a_introduction,a.release_time as a_releaseTime,a.picture as a_picture
    from singer s left join singer_album sa on s.id =sa.sid
    left join album a on sa.aid = a.id
    where s.id = #{id,jdbcType=INTEGER}
  </select>

  <select id="selectSingerIdByName" useCache="true" parameterType = "map" resultType="Integer">
    select id from singer
    <where>
      <if test="name != null and name != ''">
        <choose>
          <when test="like">
            and name like "%"#{name,jdbcType=VARCHAR}"%"
          </when>
          <otherwise>
            and name = #{name,jdbcType=VARCHAR}
          </otherwise>
        </choose>
      </if>
    </where>
  </select>

  <select id="selectSingersBySingerName" useCache="true" parameterType = "map" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from singer
    <where>
      <if test="name != null and name != ''">
        <choose>
          <when test="like">
            and name like "%"#{name,jdbcType=VARCHAR}"%"
          </when>
          <otherwise>
            and name = #{name,jdbcType=VARCHAR}
          </otherwise>
        </choose>
      </if>
    </where>
  </select>

  <delete id="deleteByPrimaryKey" flushCache="true" parameterType="java.lang.Integer">
    delete from singer
    where id = #{id,jdbcType=INTEGER}
  </delete>

  <insert id="insert" flushCache="true" parameterType="com.musicbeat.web.model.Singer">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into singer (name, gender, lang, 
      picture, is_band, introduction
      )
    values (#{name,jdbcType=VARCHAR}, #{gender,jdbcType=BIT}, #{lang,jdbcType=VARCHAR}, 
      #{picture,jdbcType=VARCHAR}, #{isBand,jdbcType=BIT}, #{introduction,jdbcType=LONGVARCHAR}
      )
  </insert>

  <insert id="insertSelective" flushCache="true" parameterType="com.musicbeat.web.model.Singer">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into singer
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="name != null">
        name,
      </if>
      <if test="gender != null">
        gender,
      </if>
      <if test="lang != null">
        lang,
      </if>
      <if test="picture != null">
        picture,
      </if>
      <if test="isBand != null">
        is_band,
      </if>
      <if test="introduction != null">
        introduction,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="gender != null">
        #{gender,jdbcType=BIT},
      </if>
      <if test="lang != null">
        #{lang,jdbcType=VARCHAR},
      </if>
      <if test="picture != null">
        #{picture,jdbcType=VARCHAR},
      </if>
      <if test="isBand != null">
        #{isBand,jdbcType=BIT},
      </if>
      <if test="introduction != null">
        #{introduction,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>

  <update id="updateByPrimaryKeySelective" flushCache="true" parameterType="com.musicbeat.web.model.Singer">
    update singer
    <set>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="gender != null">
        gender = #{gender,jdbcType=BIT},
      </if>
      <if test="lang != null">
        lang = #{lang,jdbcType=VARCHAR},
      </if>
      <if test="picture != null">
        picture = #{picture,jdbcType=VARCHAR},
      </if>
      <if test="isBand != null">
        is_band = #{isBand,jdbcType=BIT},
      </if>
      <if test="introduction != null">
        introduction = #{introduction,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>

  <update id="updateByPrimaryKeyWithBLOBs" flushCache="true" parameterType="com.musicbeat.web.model.Singer">
    update singer
    set name = #{name,jdbcType=VARCHAR},
      gender = #{gender,jdbcType=BIT},
      lang = #{lang,jdbcType=VARCHAR},
      picture = #{picture,jdbcType=VARCHAR},
      is_band = #{isBand,jdbcType=BIT},
      introduction = #{introduction,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <update id="updateByPrimaryKey" flushCache="true" parameterType="com.musicbeat.web.model.Singer">
    update singer
    set name = #{name,jdbcType=VARCHAR},
      gender = #{gender,jdbcType=BIT},
      lang = #{lang,jdbcType=VARCHAR},
      picture = #{picture,jdbcType=VARCHAR},
      is_band = #{isBand,jdbcType=BIT}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="selectAlbumsById" useCache="true" parameterType="Integer" resultMap="SingerAlbumMap">
    select s.id,s.name,s.gender,s.lang,s.picture,s.introduction,s.is_band,a.id as a_id,a.name as a_name,
    a.introduction as a_introduction,a.release_time as a_releaseTime,a.picture as a_picture
    from singer s left join singer_album sa on s.id =sa.sid
    left join album a on sa.aid = a.id
    where s.id = #{id,jdbcType=INTEGER}
  </select>

  <select id="selectAll" useCache="true" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from singer
  </select>

  <select id="selectByLangGenderBand" useCache="true" parameterType="Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from singer
    <where>
    <if test="lang != null ">
      lang = #{lang}
    </if>
    <if test="gender != null">
      and gender = #{gender}
    </if>
      <if test="isBand != null">
        and is_band = #{isBand}
      </if>
    </where>
  </select>

</mapper>