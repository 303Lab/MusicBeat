<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

  <!-- 自动扫描 -->
  <context:component-scan base-package="com.musicbeat.web"/>

  <!-- 第〇种方式: 加载一个properties文件 -->
  <!--<context:property-placeholder location="classpath:config/jdbc.properties" ignore-unresolvable="true"
  />-->

  <!-- 第一种方式：加载一个properties文件 -->
  <!--<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="location" value="classpath:config/jdbc.properties"/>
  </bean>-->


   <!-- 第二种方式：加载多个properties文件 -->
  <bean id="configProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
      <property name="locations">
          <list>
              <value>classpath:config/jdbc.properties</value>
              <value>classpath:config/redis.properties</value>
          </list>
      </property>
      <property name="fileEncoding" value="UTF-8"/>
  </bean>
  <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">
      <property name="properties" ref="configProperties"/>
  </bean>

  <!-- 配置数据源 -->
  <!--<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
  destroy-method="close">
  <property name="driverClassName" value="${driverClasss}"/>
  <property name="url" value="${jdbcUrl}"/>
  <property name="username" value="${username}"/>
  <property name="password" value="${password}"/>
  &lt;!&ndash; 初始化连接大小 &ndash;&gt;
  <property name="initialSize" value="${initialSize}"/>
  &lt;!&ndash; 连接池最大数量 &ndash;&gt;
  <property name="maxActive" value="${maxActive}"/>
  &lt;!&ndash; 连接池最大空闲 &ndash;&gt;
  <property name="maxIdle" value="${maxIdle}"/>
  &lt;!&ndash; 连接池最小空闲 &ndash;&gt;
  <property name="minIdle" value="${minIdle}"/>
  &lt;!&ndash; 获取连接最大等待时间 &ndash;&gt;
  <property name="maxWait" value="${maxWait}"/>
  </bean>-->

  <bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource">
    <property name="driverClassName" value="${driverClass}"/>
    <property name="url" value="${jdbcUrl}"/>
    <property name="username" value="${username}"/>
    <property name="password" value="${password}"/>
    <!-- 连接池最大数量 -->
    <property name="maxActive" value="${mysql.maxActive}"/>
    <!-- 连接池最大空闲 -->
    <property name="maxIdle" value="${mysql.maxIdle}"/>
    <!-- 连接池最小空闲 -->
    <property name="minIdle" value="${mysql.minIdle}"/>
    <!-- 获取连接最大等待时间 -->
    <property name="maxWait" value="${mysql.maxWait}"/>
    <!-- 初始化连接大小 -->
    <property name="initialSize" value="${mysql.initialSize}"/>
    <property name="testWhileIdle" value="${mysql.testWhileIdle}"/>
    <property name="testOnBorrow" value="${mysql.testOnBorrow}"/>
    <property name="testOnReturn" value="${mysql.testOnReturn}"/>
    <property name="validationQuery" value="${mysql.validationQuery}"/>
    <property name="validationInterval" value="${mysql.validationInterval}"/>
    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
    <property name="timeBetweenEvictionRunsMillis" value="${mysql.timeBetweenEvictionRunsMillis}"/>
    <!-- 1800秒，也就是30分钟 -->
    <property name="removeAbandonedTimeout" value="${mysql.removeAbandonedTimeout}"/>
    <!-- 打开removeAbandoned功能 -->
    <property name="removeAbandoned" value="${mysql.removeAbandoned}"/>
    <!-- 打开abandoned连接时输出错误日志 -->
    <property name="logAbandoned" value="${mysql.logAbandoned}"/>
    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
    <property name="minEvictableIdleTimeMillis" value="${mysql.minEvictableIdleTimeMillis}"/>
    <property name="jmxEnabled" value="${mysql.jmxEnabled}"/>
  </bean>

  <!--sqlsessionFactory bean-->
  <bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
    <property name="configLocation" value="classpath:config/mybatis/sqlmapConfig.xml"/>
    <property name="dataSource" ref="dataSource"/>
  </bean>

  <!-- mybatis和spring完美整合，不需要mybatis的配置映射文件 -->
  <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    <property name="dataSource" ref="dataSource"/>
    <!-- 自动扫描mapping.xml文件 -->
    <property name="mapperLocations" value="classpath:mapper/*Mapper.xml"/>
  </bean>

  <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
  <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    <property name="basePackage" value="com.musicbeat.web.mapper"/>
    <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
  </bean>

  <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
  <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="dataSource"/>
  </bean>
  <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
    <tx:attributes>
      <tx:method name="add*" propagation="REQUIRED" />
      <tx:method name="append*" propagation="REQUIRED" />
      <tx:method name="insert*" propagation="REQUIRED" />
      <tx:method name="save*" propagation="REQUIRED" />
      <tx:method name="update*" propagation="REQUIRED" />
      <tx:method name="modify*" propagation="REQUIRED" />
      <tx:method name="edit*" propagation="REQUIRED" />
      <tx:method name="delete*" propagation="REQUIRED" />
      <tx:method name="remove*" propagation="REQUIRED" />
      <tx:method name="repair" propagation="REQUIRED" />
      <tx:method name="delAndRepair" propagation="REQUIRED" />

      <tx:method name="get*" propagation="SUPPORTS" />
      <tx:method name="find*" propagation="SUPPORTS" />
      <tx:method name="load*" propagation="SUPPORTS" />
      <tx:method name="search*" propagation="SUPPORTS" />
      <tx:method name="datagrid*" propagation="SUPPORTS" />

      <tx:method name="*" propagation="SUPPORTS" />
    </tx:attributes>
  </tx:advice>
  <aop:config>
    <aop:pointcut id="transactionPointcut" expression="execution(* com.musicbeat.web.service..*Impl.*(..))" />
    <aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" />
  </aop:config>

  <!-- 将session放入redis -->
  <context:annotation-config/>
  <!-- redis 配置 -->
  <bean id="httpSessionMonitorListener" class="com.musicbeat.web.utils.HttpSessionMonitorListener" />

  <!-- @Important -->
  <!-- Cookie strategy is the framework default strategy,But exist cross-domain problem -->
  <!-- Reason: org.springframework.session.web.http.DefaultCookieSerializer.getCookiePath(HttpServletRequest) -->
  <bean id="cookieHttpSessionStrategy" class="org.springframework.session.web.http.CookieHttpSessionStrategy" />

  <bean id="redisHttpSessionConfiguration" class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration">
    <property name="maxInactiveIntervalInSeconds" value="1800" />
    <property name="httpSessionStrategy" ref="cookieHttpSessionStrategy"/>
    <property name="httpSessionListeners">
      <list>
        <ref bean="httpSessionMonitorListener"/>
      </list>
    </property>
  </bean>

  <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
    <property name="maxTotal" value="${redis.pool.maxTotal}" />
    <property name="maxIdle" value="${redis.pool.maxIdle}" />
    <property name="minIdle" value="${redis.pool.minIdle}" />
    <property name="blockWhenExhausted" value="${redis.pool.blockWhenExhausted}" />
    <property name="maxWaitMillis" value="${redis.pool.maxWaitMillis}" />
    <property name="testOnBorrow" value="${redis.pool.testOnBorrow}" />
    <property name="testOnReturn" value="${redis.pool.testOnReturn}" />
    <property name="testWhileIdle" value="${redis.pool.testWhileIdle}" />
    <property name="minEvictableIdleTimeMillis" value="${redis.pool.minEvictableIdleTimeMillis}" />
    <property name="timeBetweenEvictionRunsMillis" value="${redis.pool.timeBetweenEvictionRunsMillis}" />
    <property name="numTestsPerEvictionRun" value="${redis.pool.numTestsPerEvictionRun}" />
  </bean>

  <!-- @Important -->
  <!-- Autowired By Type Of org.springframework.data.redis.connection.RedisConnectionFactory -->
  <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
    <property name="hostName" value="${redis.host}" />
    <property name="port" value="${redis.port}" />
    <property name="password" value="${redis.password}" />
    <property name="database" value="${redis.database}" />
    <property name="timeout" value="${redis.timeout}" />
    <property name="poolConfig" ref="jedisPoolConfig" />
    <property name="usePool" value="${redis.usePool}" />
  </bean>

  <bean id="jedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
    <property name="connectionFactory" ref="jedisConnectionFactory" />
    <property name="keySerializer">
      <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
    </property>
    <property name="valueSerializer">
      <!-- <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" /> -->
      <bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer" />
    </property>
    <property name="hashKeySerializer">
      <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
    </property>
    <property name="hashValueSerializer">
      <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
    </property>
  </bean>

</beans>